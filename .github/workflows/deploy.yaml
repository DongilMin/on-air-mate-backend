name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check code formatting
      run: npm run check

    - name: Build application
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          set -e
          cd /home/ec2-user/on-air-mate &&
          
          echo "=== 최신 코드 가져오기 ==="
          git pull origin main &&
          
          echo "=== 의존성 설치 (프로덕션 전용) ==="
          npm ci --omit=dev &&
          
          echo "=== Prisma 설정 ==="
          npx prisma generate &&
          npx prisma db push &&
          
          echo "=== 애플리케이션 빌드 ==="
          npm run build &&
          
          echo "=== PM2 프로세스 정리 및 재시작 ==="
          pm2 delete onairmate-api 2>/dev/null || echo "기존 프로세스 없음"
          
          echo "=== 새 프로세스 시작 (메모리 제한) ==="
          pm2 start npm --name "onairmate-api" -- run dev --max-memory-restart 200M
          
          echo "=== 배포 상태 확인 ==="
          sleep 5 &&
          pm2 status &&
          
          echo "=== 헬스체크 ==="
          curl -f http://localhost:3000/health || exit 1
          
          echo "=== 불필요한 파일 정리 ==="
          npm cache clean --force 2>/dev/null || true
          
          echo "=== 배포 완료 ==="
        '

    - name: Verify deployment
      run: |
        echo "✅ 배포가 성공적으로 완료되었습니다!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ 배포 성공: ${{ secrets.EC2_HOST }}"
        else
          echo "❌ 배포 실패: ${{ secrets.EC2_HOST }}"
        fi
